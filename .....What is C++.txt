.....What is C++?
C++ is a cross-platform language that can be used to create high-performance applications.

C++ was developed by Bjarne Stroustrup, as an extension to the C language.

C++ gives programmers a high level of control over system resources and memory.

.......Why Use C++....
C++ is one of the world's most popular programming languages.

C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.

C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.

C++ is portable and can be used to develop applications that can be adapted to multiple platforms.

C++ is fun and easy to learn!

As C++ is close to C, C# and Java, it makes it easy for programmers to switch to C++ or vice versa.

........Difference between C and C++......
C++ was developed as an extension of C, and both languages have almost the same syntax.

The main difference between C and C++ is that C++ support classes and objects, while C does not.


...C++ Syntax....
Let's break up the following code to understand it better:

Example
#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}

..........Single-line Comments.....
Single-line comments start with two forward slashes (//).

Any text between // and the end of the line is ignored by the compiler (will not be executed).

This example uses a single-line comment before a line of code:

Example
// This is a comment
cout << "Hello World!";


......C++ Variables.....
Variables are containers for storing data values.

In C++, there are different types of variables (defined with different keywords), for example:

int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false.


...C++ User Input...
You have already learned that cout is used to output (print) values. Now we will use cin to get user input.

cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:

Example
int x; 
cout << "Type a number: "; // Type a number and press enter
cin >> x; // Get user input from the keyboard
cout << "Your number is: " << x; // Display the input value

***Creating a Simple Calculator***
In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:

Example
int x, y;
int sum;
cout << "Type a number: ";
cin >> x;
cout << "Type another number: ";
cin >> y;
sum = x + y;
cout << "Sum is: " << sum;


.....C++ Data Types....

**Basic Data Types
The data type specifies the size and type of information the variable will store:

Data Type	Size	Description
boolean	1 byte	           Stores true or false values
char	       1 byte 	           Stores a single character/letter/number, or ASCII values
int	      2 or 4 bytes            Stores whole numbers, without decimals
float	        4 bytes                  Stores fractional numbers, containing one or more decimals. Sufficient for  
double	 8 bytes	             Stores fractional numbers, containing one or more decimals. Sufficient for  


.........Arithmetic Operators........
Arithmetic operators are used to perform common mathematical operations.

Operator	Name	                 Description	                                           Example	
+	Addition	                       Adds together two values	                            x + y	
-	Subtraction	           Subtracts one value from another	                    x - y	
*	Multiplication	            Multiplies two values	                                     x * y	
/	Division	                 Divides one value by another	                             x / y	
%	Modulus	                    Returns the division remainder	                      x % y	
++	Increment	                 Increases the value of a variable by 1                     ++x	
--	Decrement	           Decreases the value of a variable by 1	             --x











